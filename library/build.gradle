apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'org.jetbrains.dokka'

group='com.github.Constructor-io'

jacoco {
    toolVersion = '0.8.4'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    jacoco.excludes = ['jdk.internal.*']
}

android {
    compileSdkVersion 31

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 31
        multiDexEnabled true
        testInstrumentationRunner "${applicationId}.runner.RxAndroidJUnitRunner"
        versionCode 1
        versionName '2.12.0'
        buildConfigField("String", "CLIENT_VERSION", "\"cioand-${versionName}\"")
        buildConfigField("String", "DEFAULT_ITEM_SECTION", "\"Products\"")
        buildConfigField("String", "SERVICE_URL", "\"ac.cnstrc.com\"")
        buildConfigField("Integer", "SERVICE_PORT", "443")
        buildConfigField("String", "SERVICE_SCHEME", "\"https\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        def commonTestDir = 'src/commonTest/java'
        test {
            java.srcDir commonTestDir
        }
        androidTest {
            java.srcDir commonTestDir
        }
    }

    lintOptions {
        textOutput "stdout"
        textReport true
        checkAllWarnings true
        warningsAsErrors true
        showAll true
        explainIssues true
        abortOnError false
        lintConfig file("$projectDir/lint.xml")
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'LICENSE.txt'
        exclude 'META-INF/license/LICENSE.base64.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
        exclude 'META-INF/MANIFEST.MF'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
      jvmTarget = "11"
    }

    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }

    tasks.dokkaHtml.configure {
        outputDirectory.set(file("../docs"))
    }
}

task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {

    def buildDir = "build/"

    def coverageSourceDirs = [
            "src/main/java"
    ]

    def excludedClasses = [
            '**/databinding/**/*.*',
            '**/android/databinding/*Binding.*',
            '**/BR.*',
            '**/R.*',
            '**/R$*.*',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*_MembersInjector.*',
            '**/Dagger*Component.*',
            '**/Dagger*Component$Builder.*',
            '**/*Module_*Factory.*',
            '**/*Fragment*.*',
            '**/*Activity*.*',
            '**/*Adapter*.*',
            '**/*ViewPager*.*',
            '**/*ViewHolder*.*',
            '**/*Module*.*'
    ]

    def javaClasses = fileTree(
            dir: "$buildDir/intermediates/classes/debug",
            excludes: excludedClasses
    )

    def kotlinClasses = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludedClasses
    )

    classDirectories.from([ javaClasses ], [ kotlinClasses ])
    additionalSourceDirs.from(coverageSourceDirs)
    sourceDirectories.from(coverageSourceDirs)
    executionData.from(dir: "$buildDir/jacoco", includes: [
            "testDebugUnitTest.exec"
    ])

    reports {
        xml.required = true
        html.required = true
    }
}

task getCoverage(type: Exec, dependsOn: 'jacocoUnitTestReport') {
    group = "Reporting"
    commandLine "open", "$buildDir/reports/jacoco/jacocoUnitTestReport/html/index.html"
}

apply from: 'dependencies.gradle'

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.13'
    implementation 'io.reactivex.rxjava2:rxkotlin:2.2.0'
    testImplementation 'io.mockk:mockk:1.12.0'
    testImplementation 'org.robolectric:robolectric:4.6.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.9.2'
    implementation supportLibs
    implementation networkLibs
    implementation otherLibs
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    kapt annotationProcessorLibs
    kaptTest daggerCompiler
    kaptAndroidTest daggerCompiler
    testImplementation unitTestLibs
    androidTestImplementation androidTestsLibs
    implementation 'androidx.multidex:multidex:2.0.1'
}

project.afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
            }
        }
    }
}